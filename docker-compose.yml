services:
  front:
    image: front
    build:
      context: ./front
    ports:
      - "4200:4200"
    volumes:
      - ./front:/app
    restart: always
    networks:
      - napoli-network
    depends_on:
      - back

  back:
    image: back
    build:
      context: ./back
    ports:
      - "3000:3000"
    volumes:
      - ./back:/app
    depends_on:
      db:
        condition: service_healthy
      minio:
        condition: service_healthy
    environment:
      JWT_SECRETS: fafafa_1911725362!@#_wow!@WECJKBD
      MINIO_ENDPOINT: minio
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
      MINIO_BUCKET: all
    networks:
      - napoli-network
    restart: on-failure

  db:
    image: postgres:17.2-alpine3.21
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: amirali0448v
      POSTGRES_DB: postgres
    ports:
      - "5432:5432"
    volumes:
      - ./pgdata:/var/lib/postgresql/data    
    restart: unless-stopped
    networks:
      - napoli-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 3s
      retries: 5

  minio:
    image: minio/minio:latest
    command: server --console-address ":6765" /data
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000" # S3 API
      - "6765:6765" # Minio Console
    volumes:
      - ./minio-data:/data
    restart: unless-stopped
    networks:
      - napoli-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  napoli-network:
    driver: bridge
